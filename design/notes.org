* High Level: High performance *control plane*
- Deterministic performance
- Focus on good /warm start/ performance. Assume cold-starts will be reduced through orthogonal mechanisms 
- Small number of components. Control plane as one process. No GC. 
- Non-distributed. Single execution context per function invocation. 
  - Containerd is a daemon...
-Performance and energy monitoring 
 - Fine-grained and trustworthy. Not just through async log-parsing but as a 1st class metric capable of being used in control-loops. 
- 

* Writing From Scratch?
- faasd provides some baseline infra
- But in Go.
- Only partial credit from a paper perspective
-
 
* Components 
1. Container runtime
2. Container Networking
3. Scheduler
4. Server/CLI
5. Logging performance and energy
6. Keep-alive
7. Load-balancer
8. Load generation tool. Sampling and practical challenge. Also at individual container level (lookbusy etc.) 

* Steps
1. Simplest possible prototype for a FaaS invoker 
   - Creat/run a single container
   - Image management issues
   - Basic networking 
2. Control plane concurrency 
   - Run multiple function invocations
   - Most control-plane policies implemented here
   - Keep track of container states: keep-alive, network interface caching, etc.
   - DelayQ and non-processor-sharing
3. Performance Demonstration
   - Latency of various steps.
   - Compare with OpenWhisk
   - Performance determinism, variance, predictability 
4. Energy Demonstration
   - Power measurement and accounting (including control plane)
   - Power capping 
5. Heterogeneity Demonstration
   - Raspberry PI, beaglebones, etc
   - WASMER and other isolation runtimes?
6. Load-balancer and central controller 

* Container Runtimes
By abstraction level:  https://containerd.io/img/architecture.png
1. Docker/podman etc 
2. Containerd (used by faasd) 
3. OCI implementations 
   - runc (Go)
   - crun (fast C impl)
   - youki (Rust), etc.
   - 


** crun 
- crun profiling? Why does it take 150ms? 
- Code seems simple and nice. *Networking?*
- wasmedge support!? https://github.com/containers/crun/blob/main/src/libcrun/handlers/wasmedge.c

** Krun
- KVM based process isolation! 
- https://github.com/containers/libkrun


** Rust 
- https://rustrepo.com/repo/flouthoc-vas-quod v. minimalistic. 
- Oracle railcar 2017 abandoned https://blogs.oracle.com/developers/post/building-a-container-runtime-in-rust
- 

** Youki
- https://www.utam0k.jp/en/blog/2021/12/27/youki_first_release/
- 200ms vs. 350 for runc. crun is 150ms wow haha
- https://github.com/containers/youki
- 2 process forks just to get started!? 


* Networking
- Aardvark and netavark https://github.com/containers/netavark 

* Images 
Two step process. =Register-function= will create the full final container image for that function. 
This image will then be directly executed when the function is invoked. 

* Interface 
- REST vs. grpc question.
- Invoker's interface/API should be self-sufficient. That is, we should be able to launch functions on a single invoker directly. 
- Maintain a similar API vs. OpenWhisk/OpenFaaS? Are there already standard APIs for FaaS? Given that there are gateways to AWS Lambda etc, there probably are. 

* FaasD

Deps:
- Containerd
- CNI for networking 

|                  |                               |           |
|------------------+-------------------------------+-----------|
| Main entry point | pkg/supervisor.go             | 500 lines |
| Networking       | pkg/cninetwork/cni_network.go |           |
- 

** Supervisor
- Dont need docker compose stuff?
- 

* Rust support?

* OmniCloud 

** Applications and Usecases
- Sandstorm grain model for long running containers hosting individual small applications? 
- Federated learning?
- Diff Privacy pooling? 


** Invoker 
*** :TODO: SmartQueue (Where is this pattern seen in the OS?)
- Ultra low latency queue for function dispatch with delaying based on resource pressure and future invocation prediction
- Possible related: microservice work (mutune, nightcore, ..) 

*** Lightweight invoker to run functions 
- FaasD as a potential option 

*** Understand OpenWhisk "packet format" and NDN coupling 

    
** Proxy 
- OpenWhisk gateway supports hierarchical names.. https://github.com/apache/openwhisk/blob/master/docs/apigateway.md
*** :TODO: Examine gateway implementation and see if it can used for our own use? 
- https://github.com/apache/openwhisk-apigateway
- Seems to be lua and http proxy only. No actual code? This is good!? But complex LUA stuff?

- Webactions.. https://github.com/apache/openwhisk/blob/master/docs/webactions.md 

** Distributed Control Plane 
- Start with proxy first (either run locally, or simply forward to the cloud)

*** NDN Routing? Original plan 


** WASM 
- Fastly wasm startup time is 35 microseconds. Sound comparison is needed with real functions. Too good to be true? 
  - WASM performance with real functions on raspberry-pi? 
- https://wasmcloud.com/ Build your functions and services in the language you want and run them securely everywhere with WebAssembly.
- https://wasmedge.org/  curl -sSf https://raw.githubusercontent.com/WasmEdge/WasmEdge/master/utils/install.sh | bash . Create an app or function for WasmEdge in: Rust,  JavaScript
- Real low latency stuff in WASM and partial execution https://news.ycombinator.com/item?id=30686919 

** Storage 
- Cockroach DB free serverless tier. 50 GB Free? https://www.cockroachlabs.com/pricing/ 
- Clodflare Durable Objects: Only one leader/primary at a time. 
- 

** Networking 
- PRISM and other proxies? UCSD Socc20 work. Klimovic? 

** Predictable performance for serverless computing 
1. From Code to predicted performance 




* ToDo 
- containers from scratch
- try crun etc on local desktop
- Micro optimizations vs. high-level design 
  - Low-level opts: container runtime, custom container creation, etc.
  - v1: Just run /some/ container somehow. Micro-optimizations can come later.
  - *Focus is on control plane*
    - WHY!? Corresponding research question?
    - Non processor sharing, delay queue, 

