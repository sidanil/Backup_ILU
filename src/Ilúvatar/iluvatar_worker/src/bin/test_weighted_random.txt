use std::sync::Arc;
use iluvatar_worker_library::services::invocation::dispatching::queueing_dispatcher::{DispatchPolicy, WeightedRandom};
use iluvatar_library::types::Compute;
use iluvatar_worker_library::services::registration::RegisteredFunction;
use iluvatar_library::transaction::TransactionId;
/// use std::collections::HashSet;

fn main() {
    let policy = WeightedRandom { gpu_probability: 0.7 };

    let supported = Compute::CPU | Compute::GPU;

    let reg = Arc::new(RegisteredFunction {
        supported_compute: supported,
        ..Default::default()  // You may need to implement or mock this
    });

    let tid: TransactionId = "test".to_string();

    for _ in 0..10 {
        let (comp, _, _) = policy.choose(&reg, &tid);
        println!("Chosen compute: {:?}", comp);
    }
}
